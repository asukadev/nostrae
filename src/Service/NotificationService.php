<?php

namespace App\Service;

// Importation des classes n√©cessaires
use App\Entity\Booking;
use App\Entity\User;
use App\Entity\Event;
use App\Entity\OrganizerRequest;
use Symfony\Bridge\Twig\Mime\TemplatedEmail;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Address;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Mime\Email;

class NotificationService
{
    private MailerInterface $mailer;
    private UrlGeneratorInterface $urlGenerator;

    public function __construct(MailerInterface $mailer, UrlGeneratorInterface $urlGenerator)
    {
        $this->mailer = $mailer;
        $this->urlGenerator = $urlGenerator;
    }

    // Envoie un email de bienvenue √† un nouvel utilisateur apr√®s son inscription
    public function sendRegistration(User $user): void
    {
        $email = (new TemplatedEmail())
            ->from(new Address('contact@tonsite.fr', 'Nostrae Events'))
            ->to($user->getEmail())
            ->subject('Bienvenue sur Nostrae !')
            ->htmlTemplate('emails/registration.html.twig')
            ->context(['user' => $user]);

        $this->mailer->send($email);
    }

    // Envoie un email de confirmation de r√©servation √† l'utilisateur
    // et une notification √† l'organisateur si diff√©rent
    public function sendReservation(Booking $booking): void
    {
        $event = $booking->getEvent();
        $user = $booking->getUser();
        $organizer = $event->getCreatedBy();

        // Email pour l'utilisateur
        $userEmail = (new TemplatedEmail())
            ->from('contact@tonsite.fr')
            ->to($user->getEmail())
            ->subject('R√©servation confirm√©e')
            ->htmlTemplate('emails/reservation_user.html.twig')
            ->context(compact('booking', 'user', 'event'));

        $this->mailer->send($userEmail);

        // Email pour l‚Äôorganisateur si ce n‚Äôest pas lui qui a r√©serv√©
        if ($organizer && $organizer->getEmail() !== $user->getEmail()) {
            $orgEmail = (new TemplatedEmail())
                ->from('contact@tonsite.fr')
                ->to($organizer->getEmail())
                ->subject('Nouvelle r√©servation pour votre √©v√©nement')
                ->htmlTemplate('emails/reservation_organizer.html.twig')
                ->context(compact('booking', 'organizer', 'event'));

            $this->mailer->send($orgEmail);
        }
    }

    // Envoie un email d‚Äôannulation √† l‚Äôutilisateur et au cr√©ateur de l‚Äô√©v√©nement
    public function sendCancellation(Booking $booking): void
    {
        $event = $booking->getEvent();
        $user = $booking->getUser();
        $organizer = $event->getCreatedBy();

        // Email √† l‚Äôutilisateur
        $userEmail = (new TemplatedEmail())
            ->from('contact@tonsite.fr')
            ->to($user->getEmail())
            ->subject('R√©servation annul√©e')
            ->htmlTemplate('emails/cancellation_user.html.twig')
            ->context(compact('booking', 'user', 'event'));

        $this->mailer->send($userEmail);

        // Email √† l‚Äôorganisateur si ce n‚Äôest pas lui-m√™me qui annule
        if ($organizer && $organizer->getEmail() !== $user->getEmail()) {
            $orgEmail = (new TemplatedEmail())
                ->from('contact@tonsite.fr')
                ->to($organizer->getEmail())
                ->subject('Une r√©servation a √©t√© annul√©e')
                ->htmlTemplate('emails/cancellation_organizer.html.twig')
                ->context(compact('booking', 'organizer', 'event'));

            $this->mailer->send($orgEmail);
        }
    }

    // Envoie un email de rappel √† un utilisateur pour un √©v√©nement imminent
    public function sendEventReminder(User $user, Event $event): void
    {
        $email = (new Email())
            ->from('contact@tonsite.fr') // Correction : propri√©t√© non d√©clar√©e `$this->fromAddress` remplac√©e
            ->to($user->getEmail())
            ->subject('üéâ Rappel : votre √©v√©nement commence bient√¥t !')
            ->html("
                <h2>Bonjour {$user->getUsername()} !</h2>
                <p>Petit rappel : l'√©v√©nement <strong>{$event->getTitle()}</strong> commence le 
                <strong>{$event->getStartAt()->format('d/m/Y √† H:i')}</strong>.</p>
                <p>Lieu : {$event->getLocation()->getName()}, {$event->getLocation()->getCity()}</p>
                <p>√Ä bient√¥t !</p>
            ");

        $this->mailer->send($email);
    }

    // Envoie une alerte √† l‚Äôadministrateur lorsqu‚Äôune nouvelle demande d‚Äôorganisateur est soumise
    public function notifyAdminNewRequest(OrganizerRequest $request): void
    {
        $adminEmail = 'admin@tonsite.com'; // Adresse √† personnaliser dans les param√®tres si n√©cessaire

        $email = (new TemplatedEmail())
            ->from(new Address('no-reply@tonsite.com', 'Nostrae'))
            ->to($adminEmail)
            ->subject('Nouvelle demande d\'organisateur')
            ->htmlTemplate('emails/admin_new_request.html.twig')
            ->context([
                'user' => $request->getUser(),
                'request' => $request,
            ]);

        $this->mailer->send($email);
    }

    // Confirme √† l‚Äôutilisateur que sa demande d‚Äôorganisateur a bien √©t√© envoy√©e
    public function notifyUserRequestSent(User $user): void
    {
        $email = (new TemplatedEmail())
            ->from(new Address('no-reply@tonsite.com', 'Nostrae'))
            ->to($user->getEmail())
            ->subject('Votre demande d\'organisateur a √©t√© envoy√©e')
            ->htmlTemplate('emails/user_request_sent.html.twig')
            ->context([
                'user' => $user,
            ]);

        $this->mailer->send($email);
    }

    // Informe l‚Äôutilisateur du r√©sultat (accept√©/refus√©) de sa demande d‚Äôorganisateur
    public function notifyUserRequestStatus(User $user, string $status): void
    {
        $subject = $status === 'accepted'
            ? 'Votre demande d\'organisateur a √©t√© accept√©e üéâ'
            : 'Votre demande d\'organisateur a √©t√© refus√©e ‚ùå';

        $template = $status === 'accepted'
            ? 'emails/user_request_accepted.html.twig'
            : 'emails/user_request_refused.html.twig';

        $email = (new TemplatedEmail())
            ->from(new Address('no-reply@tonsite.com', 'Nostrae'))
            ->to($user->getEmail())
            ->subject($subject)
            ->htmlTemplate($template)
            ->context([
                'user' => $user,
            ]);

        $this->mailer->send($email);
    }
}
